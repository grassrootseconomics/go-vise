- 0.2.3
	* Node navigation traversal module with pluggable code hooks.
	* Developer tool to generate node navigation map.
	* Expose code to manually trigger state rewind (asm: MOVE ^)
	* Add gettext resource handler for menu and template.
	* Fix premature close of postgres data dumper
	* Expose session id in structured logger when using context
	* Enable custom key-value pairs in context for structured logging
- 0.2.2
	* Customizable menu separator
	* Make available node movement direction detection in state object.
	* Add data dumper iterator for the db interface
	* Implement data dumper for gdbm, postgres, fs db.
- 0.2.1
	* Add lateral navigation indicator in State
	* Fix wrong key usage in postgres.
	* Add date updated field in postgres.
- 0.2.0
	* Remove Init from engine interface, allowing input to be passed in all parts of engine execution.
	* Rename engine interface WriteResult to Flush.
	* Remove need for Exec before Loop
	* Add initial input option for Loop
	* Enable alternate input validators if default validator fails.
	* Use template as output by default on empty bytecode terminate.
	* Extend engine execution states (execd)
	* Automatically discard render when Exec called without Flush.
	* Fix sizer bug not including newlines in lateral navigation alternatives.
- 0.1.0
	* Data storage interface (db.Db) with implementations for memory (db.memDb), filesystem (db.fsDb), gdbm (db.gdbmDb) and Postgres (db.pgDb).
	* Replace resource.FsResource and resource.MemResource with resource.DbResource using corresponding db.Db backend.
	* Pre-VM EntryFunc hook to allow execution prevention (e.g. blocked access).
	* Base HTTP server engine interface.
	* Tool to collect templates, code, menus with translations to a single gdbm file, usable with db.GdbmDb.
	* Invalidation option for state and cache to prevent accidental persistence when not desired.
	* Flag parser that loads flags with string identifiers, values and descriptions from a csv file.
	* Add preprocessor to assembler tool to enable use of flag parser (CATCH and CROAK statements).
	* Use last cached value on clean exit without remaining code.
	* Add missing go.sum file.
	* Single constructor for engine with automagical handling for state, cache and persistence.
	* State constructor returns pointer.
	* Prevent endless state move recursion.
	* Ensure SessionId and Language is available in context in all engine execution branches.
	* Reduce cache usage size correctly on reset.
	* Add flush state and cache option for persister on save.
	* Remove dead code from asm package.
- 0.0.15
	* Add comprehensive documentation with texinfo.
	* Prevent cursor leak in sizer.
- 0.0.14
	* Add language support for menus.
	* Support for multi-page menus (only works for template renders without a sink).
	* Executable example for multi-page menus.
	* Fix broken menu batch instruction assembly.
- 0.0.13
	* Panic instead of error when interfacing out-of-bounds state flags.
	* Reverse catch mode, true/1 now means test set instead of reset.
	* Make context first arg in method where it is used.
	* Add application defined status code to external symbol result.
- 0.0.12
	* Add volatile resource.MemResource implementation
	* Enable registering error string in renderer for display.
- 0.0.11:
	* Language context for external symbol and template lookups.
	* Implement language selection via config and bytecode execution.
- 0.0.10:
	* Add control symbol resolution to the MOVE instruction.
	* Make persist properly recover non-root states.
	* Implement persistent state engine.
- 0.0.9:
	* Change module path to git.defalsify.org/vise.git (added .git postfix).
	* Add previously missing WARN loglevel.
	* Replace bash script with Makefile for examples compilation.
	* Remove residual menu upon symbol change without render.
	* Add context-sensitive logger interface.
- 0.0.8:
	* Add license file
	* Add features description in readme.
	* Define offset visible for application for definable state flags.
	* Add hello world example.
	* Allow special targets for catch.
- 0.0.7:
	* Restart state and engine on empty termination code (start from top).
	* Add no-move transition option, replaying current node.
- 0.0.6:
	* Flush code buffer on catch
	* Catch empty code after init
	* Ensure passthrough of wildcards when have match in INCMP handler.
	* Add profile menu example.
	* Rename project from "festive" to "vise"
- 0.0.5:
	* Ensure correct entry point for persisted runner.
	* Allow special target "ascend" ("_") in catch code.
	* Add input to external code handler interface.
	* Add persistent state engine runner method.
	* Move source files to root directory.
- 0.0.4:
	* Enable choice of writer for render in engine loop.
	* Catch browser beyond start.
	* Handle browse (pagination) inputs.
	* Add menu render to sizer calculation.
- 0.0.3:
	* Synchronize cache stack with state stack in vm runner execution.
	* Terminate on EOF if not checking input (INCMP).
	* Add file source alternative for external symbols in fs resource.
	* Factor out engine loop code.
	* Enable stateful rendering through vm object.
	* Factor out menu handlig.
	* Make browse menu options conditional on browse state.
	* Add sink symbol splitting (fills remaining space).
- 0.0.2:
	* Add termination handler in engine.
	* Ensure initial display when engine first executed (output from engine.Init)
	* Add batch menu command handling for asm.
- 0.0.1:
	Âª Create base components.
